insert.user=INSERT INTO USER (FIRST_NAME, LAST_NAME, LOGIN, PASSWORD, ROLE_ID) \
  VALUES (?,?,?,?, (SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME = ?))
insert.user.lecturer=INSERT INTO USER (FIRST_NAME, LAST_NAME, LOGIN, PASSWORD, ROLE_ID) \
  VALUES (?,?,?,?, (SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME = 'LECTURER'));\

insert.user.student=INSERT INTO USER (FIRST_NAME, LAST_NAME, LOGIN, PASSWORD, ROLE_ID) \
  VALUES (?,?,?,?, (SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME = 'STUDENT'));
insert.student.reference=INSERT INTO STUDENT (STUDENT_ID) VALUES (IDENTITY());
insert.lecturer=INSERT INTO LECTURER(LECTURER_ID, JOB_TITLE) VALUES (IDENTITY(), ?);
find.user.by.login=SELECT USER.USER_ID, USER.LOGIN, USER.PASSWORD, USER.FIRST_NAME, USER.LAST_NAME, ROLE_NAME FROM USER \
  INNER JOIN ROLE ON USER.ROLE_ID = ROLE.ROLE_ID \
  WHERE LOGIN=?
#anonym
find.all.courses=SELECT COURSE_ID, NAME,DESCRIPTION,IS_AVAILABLE,LECTURER.LECTURER_ID, USER.FIRST_NAME,USER.LAST_NAME,JOB_TITLE FROM COURSE \
  INNER JOIN LECTURER ON COURSE.LECTURER_ID = LECTURER.LECTURER_ID \
  INNER JOIN USER ON USER_ID=COURSE.LECTURER_ID \
  ORDER BY UPPER_NAME
find.all.courses.available=SELECT COURSE_ID, NAME,DESCRIPTION,IS_AVAILABLE,LECTURER.LECTURER_ID, USER.FIRST_NAME,USER.LAST_NAME,JOB_TITLE FROM COURSE \
  INNER JOIN LECTURER ON COURSE.LECTURER_ID = LECTURER.LECTURER_ID where IS_AVAILABLE=? \
  INNER JOIN USER ON USER_ID=COURSE.LECTURER_ID
find.course.by.id=SELECT COURSE_ID, NAME,DESCRIPTION,IS_AVAILABLE,LECTURER.LECTURER_ID,USER.FIRST_NAME,USER.LAST_NAME,LECTURER.JOB_TITLE FROM COURSE \
  INNER JOIN LECTURER ON COURSE.LECTURER_ID = LECTURER.LECTURER_ID \
  INNER JOIN USER ON USER_ID=COURSE.LECTURER_ID \
  WHERE COURSE_ID=?
find.course.by.name=SELECT COURSE_ID, NAME,DESCRIPTION,IS_AVAILABLE,LECTURER.LECTURER_ID, USER.FIRST_NAME,USER.LAST_NAME,JOB_TITLE FROM COURSE \
  INNER JOIN LECTURER ON COURSE.LECTURER_ID = LECTURER.LECTURER_ID \
  INNER JOIN USER ON USER_ID=COURSE.LECTURER_ID WHERE UPPER_NAME LIKE ? \
  ORDER BY UPPER_NAME
#stud
find.courses.all.by.student.id=SELECT COURSE_ID, NAME,DESCRIPTION,IS_AVAILABLE,LECTURER_ID,FIRST_NAME,LAST_NAME,JOB_TITLE \
  FROM STUDENT_COURSE \
  LEFT JOIN COURSE ON STUDENT_COURSE.COURSE_ID = COURSE.COURSE_ID \
  WHERE STUDENT_ID=?
find.courses.complete.by.student.id=SELECT * FROM STUDENT_COURSE \
  INNER JOIN COURSE ON STUDENT_COURSE.COURSE_ID = COURSE.COURSE_ID \
  WHERE STUDENT_ID=? and IS_AVAILABLE=?
insert.course.for.student=INSERT INTO STUDENT_COURSE (STUDENT_ID, COURSE_ID) VALUES (?,?)
#lecturer
find.courses.by.lecturer.id=SELECT COURSE_ID, NAME,DESCRIPTION,IS_AVAILABLE, \
  LECTURER.LECTURER_ID, USER.FIRST_NAME,USER.LAST_NAME,JOB_TITLE FROM COURSE \
  INNER JOIN LECTURER ON COURSE.LECTURER_ID = LECTURER.LECTURER_ID \
  INNER JOIN USER ON LECTURER.LECTURER_ID=USER_ID \
  WHERE COURSE.LECTURER_ID=? \
  ORDER BY UPPER_NAME
find.current.students.by.course.id=SELECT STUDENT_COURSE.STUDENT_ID, FIRST_NAME, LAST_NAME FROM USER \
  INNER JOIN STUDENT_COURSE ON USER.USER_ID = STUDENT_COURSE.STUDENT_ID \
  WHERE STUDENT_COURSE.COURSE_ID=? AND IS_COMPLETE IS NOT NULL
find.student.by.course.id=SELECT * FROM (USER \
  INNER JOIN STUDENT_COURSE ON USER.USER_ID = STUDENT_COURSE.STUDENT_ID) \
  WHERE STUDENT_COURSE.STUDENT_ID=? AND STUDENT_COURSE.COURSE_ID=?
find.course.by.student.id=SELECT COURSE_ID, NAME, DESCRIPTION, IS_COMPLETE, GRADE, FEEDBACK FROM COURSE \
  inner join STUDENT_COURSE on COURSE.COURSE_ID=STUDENT_COURSE.COURSE_ID \
  WHERE STUDENT_ID=? and COURSE_ID=?
update.student.course=UPDATE STUDENT_COURSE SET IS_COMPLETE=TRUE, GRADE=?, FEEDBACK=? WHERE STUDENT_ID=? AND COURSE_ID=?
insert.new.course=INSERT INTO COURSE (NAME, UPPER_NAME, DESCRIPTION, LECTURER_ID) VALUES(?,?,?,?)
update.course.availability=update COURSE set IS_AVAILABLE=? where COURSE_ID=?
find.courses.completed.by.student.id=SELECT STUDENT_COURSE.ID,STUDENT_COURSE.COURSE_ID, NAME, DESCRIPTION, IS_COMPLETE, GRADE, FEEDBACK \
  FROM STUDENT_COURSE INNER JOIN COURSE ON STUDENT_COURSE.COURSE_ID = COURSE.COURSE_ID \
  WHERE STUDENT_ID=? AND (IS_COMPLETE=TRUE OR IS_COMPLETE IS NULL) \
  ORDER BY UPPER_NAME
find.courses.uncompleted.by.student.id=SELECT STUDENT_COURSE.ID,STUDENT_COURSE.COURSE_ID, NAME, DESCRIPTION, IS_COMPLETE, GRADE, FEEDBACK \
  FROM STUDENT_COURSE INNER JOIN COURSE ON STUDENT_COURSE.COURSE_ID = COURSE.COURSE_ID \
  WHERE STUDENT_ID=? AND IS_COMPLETE=FALSE
find.user.by.id=SELECT FIRST_NAME, LAST_NAME, LOGIN, PASSWORD, ROLE_NAME FROM USER \
  INNER JOIN ROLE ON USER.ROLE_ID = ROLE.ROLE_ID \
  WHERE USER_ID=?

update.courses.set.complete.null=UPDATE STUDENT_COURSE SET IS_COMPLETE=NULL WHERE COURSE_ID=? AND IS_COMPLETE=TRUE